#! /usr/bin/env python
#******************************************************************************
#                                                                             *
#               *    **   *  *   *                           *                *
#              * *  *  *  *  *  * *                          *                *
#             ***** *  *  *  * *****  **  ***  *  *  ** ***  ***              *
#             *   * *  *  *  * *   * *  * *  * *  * *   *  * *  *             *
#             *   * *  *  *  * *   * *  * *  * *  *   * *  * *  *             *
#             *   *  ** *  **  *   *  *** ***   *** **  ***  *  *             *
#                                       * *             *                     *
#                                     **  *             *                     *
#                                                                             *
#******************************************************************************
#                                                                             *
#  This file is part of AQUAgpusph, a free CFD program based on SPH.          *
#  Copyright (C) 2012  Jose Luis Cercos Pita <jl.cercos@upm.es>               *
#                                                                             *
#  AQUAgpusph is free software: you can redistribute it and/or modify         *
#  it under the terms of the GNU General Public License as published by       *
#  the Free Software Foundation, either version 3 of the License, or          *
#  (at your option) any later version.                                        *
#                                                                             *
#  AQUAgpusph is distributed in the hope that it will be useful,              *
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             *
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
#  GNU General Public License for more details.                               *
#                                                                             *
#  You should have received a copy of the GNU General Public License          *
#  along with AQUAgpusph.  If not, see <http://www.gnu.org/licenses/>.        *
#                                                                             *
#******************************************************************************

import argparse
from argparse import ArgumentParser
import glob
import vtk
from math import *
import sys
import multiprocessing
from multiprocessing import Process, Queue


description = (
    "Extract the free surface particles from the simualtion output particles"
    " VTU file, and optionally compute a mesh over it.")
version = "%prog 1.0"

DIMS = 3


def readVTU(filepath):
    """Read a particles VTU file"""
    reader = vtk.vtkXMLUnstructuredGridReader()
    reader.SetFileName(filepath)
    reader.Update()

    grid = reader.GetOutput()
    n = grid.GetNumberOfPoints()
    if not n:
        raise ValueError("No particles found in the file")
    return grid


def filterFluid(particles):
    n = particles.GetNumberOfPoints()
    points = particles.GetPoints()
    data = particles.GetPointData()
    imove = data.GetArray("imove")

    fs_particles = vtk.vtkUnstructuredGrid()
    fs_points = vtk.vtkPoints()
    fs_cells = vtk.vtkCellArray()
    fs_arrays = []

    for i in range(data.GetNumberOfArrays()):
        array = data.GetArray(i)
        t = array.GetDataType()
        if t == vtk.VTK_FLOAT:
            fs_array = vtk.vtkFloatArray()
        elif t == vtk.VTK_INT:
            fs_array = vtk.vtkIntArray()
        elif t == vtk.VTK_UNSIGNED_INT:
            fs_array = vtk.vtkUnsignedIntArray()
        else:
            raise ValueError(
                'Found an array of the type {}, which is unknow'.format(t))        
        fs_array.SetNumberOfComponents(array.GetNumberOfComponents())
        fs_array.SetName(array.GetName())
        fs_arrays.append(fs_array)

    pid = 0
    for i in range(n):
        if imove.GetComponent(i, 0) <= 0:
            continue
        point = points.GetPoint(i)
        fs_points.InsertNextPoint(*point)
        for j in range(len(fs_arrays)):
            fs_array = fs_arrays[j]
            array = data.GetArray(j)
            fs_array.InsertNextTuple(array.GetTuple(i))
        vertex = vtk.vtkVertex()
        vertex.GetPointIds().SetId(0, pid)
        fs_cells.InsertNextCell(vertex)
        pid += 1

    fs_particles.SetPoints(fs_points)
    fs_particles.SetCells(vertex.GetCellType(), fs_cells)
    for array in fs_arrays:
        fs_particles.GetPointData().AddArray(array);

    return fs_particles


def parse(filepath, args):
    """Parse a VTU file"""
    particles = readVTU(filepath)

    data = particles.GetPointData()
    if not data.HasArray('imove'):
        raise ValueError('imove flags not found in the input file')

    fs_particles = filterFluid(particles)

    n = fs_particles.GetNumberOfPoints()
    points = fs_particles.GetPoints()
    point_min = list(points.GetPoint(0))
    point_max = list(points.GetPoint(0))
    for i in range(1, n):
        point = points.GetPoint(i)
        for j in range(0, 3):
            point_min[j] = min(point_min[j], point[j])
            point_max[j] = max(point_max[j], point[j])
    L = [point_max[i] - point_min[i] for i in range(3)]
    N = [int(round(L[i] / args.dr)) + 1 for i in range(3)]

    voxels = vtk.vtkGaussianSplatter()
    voxels.SetInputData(fs_particles)
    voxels.SetSampleDimensions(*N)
    # voxels.SetRadius(args.dr / max(L))
    voxels.SetRadius(args.dr)
    voxels.ScalarWarpingOff()

    mesh = vtk.vtkContourFilter()
    # mesh = vtk.vtkMarchingCubes()
    mesh.ComputeNormalsOn()
    mesh.ComputeGradientsOff()
    mesh.SetInputConnection(voxels.GetOutputPort())
    mesh.SetValue(0, 0.01)
    mesh.Update()

    polyData = mesh.GetOutput()
    if args.smooth > 0:
        smooth = vtk.vtkSmoothPolyDataFilter()
        smooth.SetInputData(polyData)
        smooth.SetNumberOfIterations(args.smooth)
        # smooth.SetRelaxationFactor(0.1)
        # smooth.SetFeatureAngle(60.0)
        # smooth.SetEdgeAngle(60.0)
        smooth.BoundarySmoothingOn()
        smooth.Update()
        polyData = smooth.GetOutput()

    writer = vtk.vtkXMLPolyDataWriter()
    writer.SetInputData(polyData)
    writer.SetDataModeToBinary()
    writer.SetFileName('fs.' + filepath + '.vtp')
    writer.Write()


def main():
    """Program entry point"""
    parser = ArgumentParser(
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-v', '--version', action='version', version=version)
    parser.add_argument('input',
                        metavar='FILES',
                        type=str,
                        nargs=1,
                        help="Input particles VTU files. Wildcards are"
                        " allowed to identify several files.")
    parser.add_argument('-d', '--deltar', metavar='VALUE', type=float,
                        dest='dr', required=True,
                        help=("Distance between particles"))
    parser.add_argument('-s', '--smooth', metavar='VALUE', type=int,
                        dest='smooth', default=200,
                        help=("Number of smooth iterations applied to the"
                        " resulting mesh (0 to don't smooth it)."))
    args = parser.parse_args()

    files = []
    for i in args.input:
        files.extend(glob.glob(i))

    files = sorted(files)

    for i, f in enumerate(files):
        sys.stdout.write("Parsing '{}' ({}/{})... ".format(f, i, len(files)))
        sys.stdout.flush()
        parse(f, args)
        print("Done!")


if __name__ == "__main__":
    main()