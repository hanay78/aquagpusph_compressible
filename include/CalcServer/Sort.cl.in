/*
 *  This file is part of AQUAgpusph, a free CFD program based on SPH.
 *  Copyright (C) 2012  Jose Luis Cercos Pita <jl.cercos@upm.es>
 *
 *  AQUAgpusph is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  AQUAgpusph is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with AQUAgpusph.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * @brief Bitonic sort OpenCL methods.
 * (See Aqua::CalcServer::Sort for details)
 * @note The header CalcServer/Sort.hcl.in is automatically appended.
 */

/** @brief Initializes the padded keys and permutations
 *
 * The permutations are initialized in such a way each point is permuted on
 * itself
 * @param in_vals Unpadded and unsorted values
 * @param vals Padded but unsorted values
 * @param keys Permutations (keys)
 * @param n Unpadded number of values.
 * @param N Padded number of values.
 */
__kernel void
init(const __global T* restrict in_vals,
     __global T* restrict vals,
     __global unsigned int* keys,
     unsigned int n,
     unsigned int N)
{
	// find position in global arrays
	unsigned int i = get_global_id(0);
	if (i >= N)
		return;

	keys[i] = i;
	if (i < n)
		vals[i] = in_vals[i];
	else
		vals[i] = T_MAX;
}

#define SWAP(address)                                                          \
inline void                                                                    \
swap ## address(address T *a,                                                  \
                address T *b,                                                  \
                address uint *ka,                                              \
                address uint *kb)                                              \
{                                                                              \
	T tmp;                                                                     \
	tmp = *b; *b = *a; *a = tmp;                                               \
	uint ktmp;                                                                 \
	ktmp = *kb; *kb = *ka; *ka = ktmp;                                         \
}

#define SORT(address)                                                          \
inline void                                                                    \
sort ## address(address T *a,                                                  \
                address T *b,                                                  \
                address uint *ka,                                              \
                address uint *kb,                                              \
                const char dir)                                                \
{                                                                              \
	if ((*a > *b) != dir) swap ## address(a, b, ka, kb);                       \
}

SWAP(__local);
SORT(__local);
SWAP(__global);
SORT(__global);

/** @brief Do the first half of the sort & merge stages
 * @param vals Values
 * @param keys Keys (permutations)
 */
__kernel void
bitonic_start(__global T* restrict vals,
              __global unsigned int* restrict keys)
{
	__local T local_vals[MAX_LOCAL_SIZE * 2];
	__local unsigned int local_keys[MAX_LOCAL_SIZE * 2];
	const unsigned int gid = get_global_id(0);
	const unsigned int lid = get_local_id(0);

	const unsigned int index = get_group_id(0) * (MAX_LOCAL_SIZE * 2) + lid;
	const unsigned int clamped_gid = gid & (MAX_LOCAL_SIZE - 1);

	local_vals[lid] = vals[index];
	local_vals[lid + MAX_LOCAL_SIZE] = vals[index + MAX_LOCAL_SIZE];
	local_keys[lid] = keys[index];
	local_keys[lid + MAX_LOCAL_SIZE] = keys[index + MAX_LOCAL_SIZE];

	// bitonic merge
	for (unsigned int bsize = 2; bsize < MAX_LOCAL_SIZE * 2; bsize <<= 1) {
		// sort every other block in the other direction (faster % calc)
		const char dir = (clamped_gid & (bsize / 2)) == 0;
#pragma unroll
		for (unsigned int stride = bsize >> 1; stride > 0; stride >>= 1){
			barrier(CLK_LOCAL_MEM_FENCE);
			//take every other input BUT starting neighbouring within one block
			const unsigned int idx = 2 * lid - (lid & (stride - 1));
			sort__local(&local_vals[idx],
			            &local_vals[idx + stride],
			            &local_keys[idx],
			            &local_keys[idx + stride],
			            dir);
		}
	}

	// bitonic merge for biggest group is special (unrolling this so we dont
	// need ifs in the part above)
	const char dir = (clamped_gid & 0);
#pragma unroll
	for (unsigned int stride = MAX_LOCAL_SIZE; stride > 0; stride >>= 1){
		barrier(CLK_LOCAL_MEM_FENCE);
		const unsigned int idx = 2 * lid - (lid & (stride - 1));
		sort__local(&local_vals[idx],
		            &local_vals[idx + stride],
		            &local_keys[idx],
		            &local_keys[idx + stride],
		            dir);
	}

	// sync and write back
	barrier(CLK_LOCAL_MEM_FENCE);
	vals[index] = local_vals[lid];
	vals[index + MAX_LOCAL_SIZE] = local_vals[lid + MAX_LOCAL_SIZE];
	keys[index] = local_keys[lid];
	keys[index + MAX_LOCAL_SIZE] = local_keys[lid + MAX_LOCAL_SIZE];
}

/** @brief Do a single sort & merge step
 *
 * Use this function when the operation still fits on the local memory
 * @param vals Values
 * @param keys Keys (permutations)
 * @param N Padded number of values.
 * @param bsize Sorting block size
 * @param stride Step length within the block
 */
__kernel void
bitonic_local(__global T* restrict vals,
              __global unsigned int* restrict keys,
              const unsigned int N,
              const unsigned int bsize,
              unsigned int stride)
{
	__local T local_vals[MAX_LOCAL_SIZE * 2];
	__local unsigned int local_keys[MAX_LOCAL_SIZE * 2];
	const unsigned int gid = get_global_id(0);
	const unsigned int lid = get_local_id(0);

	const unsigned int index = get_group_id(0) * (MAX_LOCAL_SIZE * 2) + lid;
	const unsigned int clamped_gid = gid & (N / 2 - 1);

	local_vals[lid] = vals[index];
	local_vals[lid + MAX_LOCAL_SIZE] = vals[index + MAX_LOCAL_SIZE];
	local_keys[lid] = keys[index];
	local_keys[lid + MAX_LOCAL_SIZE] = keys[index + MAX_LOCAL_SIZE];

	// bitonic merge
	const char dir = (clamped_gid & (bsize / 2)) == 0;
#pragma unroll
	for (; stride > 0; stride >>= 1) {
		barrier(CLK_LOCAL_MEM_FENCE);
		const unsigned int idx = 2 * lid - (lid & (stride - 1));
		sort__local(&local_vals[idx],
		            &local_vals[idx + stride],
		            &local_keys[idx],
		            &local_keys[idx + stride],
		            dir);
	}

	// sync and write back
	barrier(CLK_LOCAL_MEM_FENCE);
	vals[index] = local_vals[lid];
	vals[index + MAX_LOCAL_SIZE] = local_vals[lid + MAX_LOCAL_SIZE];
	keys[index] = local_keys[lid];
	keys[index + MAX_LOCAL_SIZE] = local_keys[lid + MAX_LOCAL_SIZE];
}

/** @brief Do a single sort & merge step
 *
 * Use this function when the operation does not fit on the local memory
 * @param vals Values
 * @param keys Keys (permutations)
 * @param N Padded number of values.
 * @param bsize Sorting block size
 * @param stride Step length within the block
 */
__kernel void
bitonic_global(__global T* restrict vals,
               __global unsigned int* restrict keys,
               const unsigned int N,
               const unsigned int bsize,
               const unsigned int stride)
{
	const unsigned int gid = get_global_id(0);
	const unsigned int clamped_gid = gid & (N / 2 - 1);

	//calculate index and dir like above
	const unsigned int index = 2 * clamped_gid - (clamped_gid & (stride - 1));
	const char dir = (clamped_gid & (bsize / 2)) == 0;

	sort__global(&vals[index],
	             &vals[index + stride],
	             &keys[index],
	             &keys[index + stride],
	             dir);
}

/** Compute the inversed permutations, which allows to know the original
 * position of a key from the sorted one.
 * @param keys Direct permutations (from the unsorted position to the sorted
 * one)
 * @param inv_keys Inverse permutations (from the sorted position to the
 * unsorted one)
 * @param n Unpadded number of values.
 */
__kernel void
inverse_keys(const __global unsigned int* restrict keys,
             __global unsigned int* inv_keys,
             unsigned int n)
{
	unsigned int i = get_global_id(0);
	if (i >= n)
		return;

	inv_keys[keys[i]] = i;
}
