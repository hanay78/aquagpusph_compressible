/*
 *  This file is part of AQUAgpusph, a free CFD program based on SPH.
 *  Copyright (C) 2012  Jose Luis Cercos Pita <jl.cercos@upm.es>
 *
 *  AQUAgpusph is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  AQUAgpusph is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with AQUAgpusph.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * @brief Manipulate the mask to can count the number of components to download.
 * (See Aqua::CalcServer::MPISync for details)
 * @note The header CalcServer/MPISync.hcl.in is automatically appended.
 */

/** Extract the submask from the selected process
 * @param mask Original processes mask
 * @param submask Mask of the selected process
 * @param proc Selected process
 * @param N Number of elements into the mask
 */
__kernel void n_offset_mask(const __global unsigned int *mask,
                            __global unsigned int *submask,
                            unsigned int proc,
                            unsigned int N)
{
    unsigned int i = get_global_id(0);
    if(i >= N)
        return;

    submask[i] = (mask[i] < proc) ? 1 : 0;
}

/** Extract the submask from the selected process
 * @param mask Original processes mask
 * @param submask Mask of the selected process
 * @param proc Selected process
 * @param N Number of elements into the mask
 */
__kernel void n_send_mask(const __global unsigned int *mask,
                          __global unsigned int *submask,
                          unsigned int proc,
                          unsigned int N)
{
    unsigned int i = get_global_id(0);
    if(i >= N)
        return;

    submask[i] = (mask[i] == proc) ? 1 : 0;
}

/** Set mask value
 * @param mask Processes mask
 * @param proc Selected process
 * @param offset First element to be set
 * @param n Number of elements to be set
 */
__kernel void set_mask(__global unsigned int *mask,
                       unsigned int proc,
                       unsigned int offset,
                       unsigned int n)
{
    unsigned int i = get_global_id(0);
    if(i >= n)
        return;

    mask[i + offset] = proc;
}
