/*
 *  This file is part of AQUAgpusph, a free CFD program based on SPH.
 *  Copyright (C) 2012  Jose Luis Cercos Pita <jl.cercos@upm.es>
 *
 *  AQUAgpusph is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  AQUAgpusph is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with AQUAgpusph.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * @brief Complex tool to perform the link-list based on the "pos" array.
 * (See Aqua::CalcServer::LinkList for details)
 * @note Hardcoded versions of the files CalcServer/LinkList.cl.in and
 * CalcServer/LinkList.hcl.in are internally included as a text array.
 */

#ifndef LINKLIST_H_INCLUDED
#define LINKLIST_H_INCLUDED

#include "aquagpusph/sphPrerequisites.hpp"
#include <vector>
#include "Tool.hpp"
#include "Reduction.hpp"
#include "RadixSort.hpp"

namespace Aqua {
namespace CalcServer {

/** @class LinkList LinkList.h CalcServer/LinkList.h
 * @brief Complex tool to perform the link-list based on an array. This
 * tool include the following steps:
 *   -# Minimum and maximum positions computations
 *   -# Number of cells calculation
 *   -# "ihoc" array allocation
 *   -# "ihoc" and "icell" calculations
 *   -# Radix sort of "icell", computing permutation array "id_sorted" and
 * "id_unsorted" as well.
 * @note Hardcoded versions of the files CalcServer/LinkList.cl.in and
 * CalcServer/LinkList.hcl.in are internally included as a text array.
 * @warning This tool is assuming that "support" and "h" variables remains
 * constant
 */
class LinkList : public Aqua::CalcServer::Tool
{
  public:
	/** Constructor.
	 * @param tool_name Tool name.
	 * @param input Input array to be used as the particles positions.
	 * @param once Run this tool just once. Useful to make initializations.
	 */
	LinkList(const std::string tool_name,
	         const std::string input = "r",
	         bool once = false);

	/** Destructor
	 */
	~LinkList();

	/** Initialize the tool.
	 */
	void setup();

	/** @brief Get the user event generated by this tool to mark when ncells
	 * have been successfully computed and the required memory allocated
	 *
	 * @return The event
	 */
	inline cl_event getUserEvent() const { return _user_event; }

	/** @brief Compute the number of cells
	 * @note This method is publicly available to make it accessible from an
	 * OpenCL callback
	 */
	void nCells();

	/** @brief Allocate the "ihoc" array
	 * @note This method is publicly available to make it accessible from an
	 * OpenCL callback
	 */
	void allocate();

	/** @brief Update the changed variables.
	 * @note This method is publicly available to make it accessible from an
	 * OpenCL callback
	 */
	void setVariables();

  protected:
	/** Execute the tool
	 * @param events List of events that shall be waited before safe execution
	 * @return OpenCL event to be waited before accessing the dependencies
	 */
	cl_event _execute(const std::vector<cl_event> events);

  private:
	/** Setup the OpenCL stuff
	 */
	void setupOpenCL();

	/// Input variable name
	std::string _input_name;

	/// Cells length
	float _cell_length;

	/// Number of cells
	uivec4 _n_cells;

	/// Minimum position computation tool
	Reduction* _min_pos;

	/// Maximum position computation tool
	Reduction* _max_pos;

	/// Sorting by cells computation tool
	RadixSort* _sort;

	/// "ihoc" array initialization
	cl_kernel _ihoc;
	/// "ihoc" array initialization local work size
	size_t _ihoc_lws;
	/// "ihoc" array initialization global work size
	size_t _ihoc_gws;
	/// "ihoc" array initialization sent arguments
	std::vector<void*> _ihoc_args;

	/// "icell" array computation
	cl_kernel _icell;
	/// "icell" array computation local work size
	size_t _icell_lws;
	/// "icell" array computation global work size
	size_t _icell_gws;
	/// "icell" array computation sent arguments
	std::vector<void*> _icell_args;

	/// "ihoc" array computation
	cl_kernel _ll;
	/// "ihoc" array computation local work size
	size_t _ll_lws;
	/// "ihoc" array computation global work size
	size_t _ll_gws;
	/// "ihoc" array computation sent arguments
	std::vector<void*> _ll_args;

	/// Convenient storage of the event to make easier to work with the
	/// callback
	cl_event _user_event;
};

}
} // namespace

#endif // LINKLIST_H_INCLUDED
